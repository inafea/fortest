version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name updapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete s3 bucket
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            exit 0


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.     
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request GET https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7})
            SUCCESS = 1
            if(( $SUCCESS==1)); 
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: on_fail
            
jobs:
  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  install-frontend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Frontend Build
          command: |
            cd frontend
            npm i
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test frontend
          command: |
            cd frontend
            npm i
            npm test
                     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test backend
          command: |
            cd backend
            npm i
            npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Check Frontend against security vulnerabilities
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - restore_cache:
          key: v1-frontend-build
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Chek Backend against security vulnerabilities
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - restore_cache:
          key: v1-backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Save backend URL in memstash
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env
            curl -H "Content-Type: text/plain" -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
              cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      # Here's where you will add some code to rollback on failure
      - destroy-environment     

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["44:d1:f0:b5:a1:df:17:11:0c:01:5c:e6:03:a1:86:53"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run migrations > migration_status
            echo migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration successful, updating memstash..."
              curl -H "Content-Type: text/plain" -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request PUT --data "fail" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
     # Here's where you will add some code to rollback on failure 
      - destroy-environment     

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            # your code here
            export API_URL=$(curl -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - revert-migrations     
      - destroy-environment
       
                    
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["44:d1:f0:b5:a1:df:17:11:0c:01:5c:e6:03:a1:86:53"]
      - attach_workspace:
          at: .
    
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version 
            export ANSIBLE_HOST_KEY_CHECKING=False
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible          
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml -vv
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment
      
  smoke-test:
    docker:
      - image: python:3.9.0-alpine 
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request GET https://api.memstash.io/values/BACKEND_URL)
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
            if curl -s ${URL} | grep "Welcome"
            then 
              return 1
            else 
              return 0
            fi
      - revert-migrations
      - destroy-environment
      

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: get old workflow if from memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure 
      - revert-migrations 

  cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            OldWorkflowID=$(curl -H "token: a1acb674-40be-46e6-83b5-96c8ed1d9827" --request GET https://api.memstash.io/values/WorkflowID)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
          environment:
            TERM: xterm-256color
            

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - deploy-infrastructure:
          requires: 
            - test-frontend 
            - test-backend 
            - scan-frontend 
            - scan-backend
          filters:
            branches:
              only: 
                - master
    # added a comment
      - configure-infrastructure:
          requires: 
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure
      - deploy-frontend:
          requires: 
            - run-migrations
      - deploy-backend:
          requires: 
            - run-migrations
      - smoke-test:
          requires: 
            - deploy-backend 
            - deploy-frontend
      - cloudfront-update:
          requires: 
            - smoke-test
      - cleanup:
          requires: 
            - cloudfront-update
